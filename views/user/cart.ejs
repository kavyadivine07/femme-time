<%- include('../partials/user/header.ejs') %>

<div class="container my-5">
    <div class="row">
        <!-- Main Cart Content -->
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header bg-white py-3 d-flex justify-content-between align-items-center">
                    <h4 class="mb-0">Shopping Cart (<%= products ? products.length : 0 %> items)</h4>
                    <a href="/shop" class="btn btn-outline-primary">
                        <i class="fas fa-arrow-left me-2"></i>Continue Shopping
                    </a>
                </div>
                <div class="card-body">
                    <% if (!products || products.length === 0) { %>
                        <div class="text-center py-5">
                            <img src="/assets/images/empty-cart.svg" alt="Empty Cart" style="width: 200px; margin-bottom: 20px;">
                            <h3>Your cart is empty</h3>
                            <p class="text-muted">Looks like you haven't added anything to your cart yet.</p>
                            <a href="/shop" class="btn btn-primary">Continue Shopping</a>
                        </div>
                    <% } else { %>
                        <div class="cart-items">
                            <% products.forEach(item => { %>
                                <div class="cart-item mb-4" id="item-<%= item.productId._id %>-<%= item.size %>">
                                    <div class="row align-items-center">
                                        <!-- Product Image -->
                                        <div class="col-md-2">
                                            <div class="product-image">
                                                <img src="/Uploads/re-image/<%= item.productId.productImage[0] %>" 
                                                     alt="<%= item.productId.productName %>" 
                                                     class="img-fluid rounded">
                                            </div>
                                        </div>
                                        <!-- Product Details -->
                                        <div class="col-md-4">
                                            <h5 class="product-name mb-2"><%= item.productId.productName %></h5>
                                            <p class="text-muted mb-2">Size: <%= item.size %></p>
                                            <p class="text-muted mb-2">Price: ₹<%= item.price.toLocaleString() %></p>
                                            <% if (item.isOutOfStock) { %>
                                                <span class="badge bg-danger">Out of Stock</span>
                                            <% } else if (item.availableStock < 5) { %>
                                                <span class="badge bg-warning text-dark">Only <%= item.availableStock %> left</span>
                                            <% } %>
                                        </div>
                                        <!-- Quantity Controls -->
                                        <div class="col-md-3">
                                            <div class="quantity-control">
                                                <label class="form-label mb-2">Quantity:</label>
                                                <div class="quantity-wrapper">
                                                    <button class="quantity-btn minus" 
                                                            onclick="updateQuantity('<%= item.productId._id %>', '<%= item.size %>', -1)"
                                                            <%= item.quantity <= 1 ? 'disabled' : '' %>>
                                                        <i class="fas fa-minus"></i>
                                                    </button>
                                                    <input type="number" 
                                                           class="form-control quantity-input" 
                                                           value="<%= item.quantity %>" 
                                                           min="1" 
                                                           max="<%= item.maxAllowedQuantity %>"
                                                           readonly>
                                                    <button class="quantity-btn plus"
                                                            onclick="updateQuantity('<%= item.productId._id %>', '<%= item.size %>', 1)"
                                                            <%= item.quantity >= item.maxAllowedQuantity ? 'disabled' : '' %>>
                                                        <i class="fas fa-plus"></i>
                                                    </button>
                                                </div>
                                                <% if (item.maxAllowedQuantity < 5) { %>
                                                    <small class="text-muted mt-1 d-block">
                                                        Max quantity: <%= item.maxAllowedQuantity %>
                                                    </small>
                                                <% } %>
                                            </div>
                                        </div>
                                        <!-- Total & Remove -->
                                        <div class="col-md-3">
                                            <div class="text-end">
                                                <h6 class="mb-3 total-price">₹<%= (item.price * item.quantity).toLocaleString() %></h6>
                                                <button class="btn btn-outline-danger" 
                                                        onclick="removeFromCart('<%= item.productId._id %>', '<%= item.size %>')">
                                                    <i class="fas fa-trash-alt me-2"></i>Remove
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    <% } %>
                </div>
            </div>
        </div>

        <!-- Order Summary -->
        <div class="col-lg-4">
            <div class="card shadow-sm">
                <div class="card-header bg-white py-3">
                    <h5 class="mb-0">Order Summary</h5>
                </div>
                <div class="card-body">
                    <div class="summary-items">
                        <div class="summary-item d-flex justify-content-between mb-3">
                            <span class="text-muted">Subtotal</span>
                            <span class="fw-bold">₹<%= totalAmount.toLocaleString() %></span>
                        </div>
                        <div class="summary-item d-flex justify-content-between mb-3">
                            <span class="text-muted">Shipping</span>
                            <span class="text-success">Free</span>
                        </div>
                        <hr>
                        <div class="summary-item d-flex justify-content-between mb-4">
                            <span class="h5 mb-0">Total</span>
                            <span class="h5 mb-0">₹<%= totalAmount.toLocaleString() %></span>
                        </div>
                        <div class="d-grid gap-2">
                            <a href="/checkout" class="btn btn-primary btn-lg <%= !products || products.length === 0 ? 'disabled pointer-events-none opacity-50' : '' %>">
                                <i class="fas fa-lock me-2"></i>Proceed to Checkout
                            </a>
                            <a href="/shop" class="btn btn-outline-secondary">
                                <i class="fas fa-arrow-left me-2"></i>Continue Shopping
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.cart-item {
    background: #fff;
    border: 1px solid #eee;
    border-radius: 12px;
    padding: 20px;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.cart-item:hover {
    border-color: #dee2e6;
    box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.08);
    transform: translateY(-2px);
}

.product-image {
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.product-image img {
    width: 100%;
    height: auto;
    transition: transform 0.3s ease;
}

.product-name {
    font-size: 1.1rem;
    font-weight: 600;
    color: #2c3e50;
    margin-bottom: 0.5rem;
}

.quantity-control {
    background: #f8f9fa;
    padding: 15px;
    border-radius: 8px;
}

.quantity-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    background: white;
    padding: 4px;
    border-radius: 6px;
    border: 1px solid #dee2e6;
}

.quantity-btn {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: none;
    background: #0f3460;
    color: white;
    border-radius: 4px;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.2s ease;
}

.quantity-btn:hover:not(:disabled) {
    background: #16478c;
    transform: translateY(-1px);
}

.quantity-btn:active:not(:disabled) {
    transform: translateY(0);
}

.quantity-btn:disabled {
    background: #e9ecef;
    color: #adb5bd;
    cursor: not-allowed;
}

.quantity-btn.minus {
    padding-bottom: 2px;
}

.quantity-btn.plus {
    padding-top: 2px;
}

.quantity-input {
    width: 50px !important;
    text-align: center;
    font-weight: 600;
    border: none;
    background: transparent;
    padding: 0;
    margin: 0;
    color: #2c3e50;
}

.quantity-input::-webkit-inner-spin-button,
.quantity-input::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.quantity-input[type=number] {
    -moz-appearance: textfield;
}

/* Hover effect for the whole quantity control */
.quantity-wrapper:hover {
    border-color: #0f3460;
}

/* Mobile adjustments */
@media (max-width: 768px) {
    .quantity-control {
        max-width: 200px;
        margin: 0 auto;
    }
}

.total-price {
    font-size: 1.2rem;
    font-weight: 600;
    color: #2c3e50;
}

.btn-outline-danger {
    border-width: 2px;
}

.btn-outline-danger:hover {
    transform: translateY(-1px);
}

.summary-items {
    font-size: 1rem;
}

.badge {
    font-weight: 500;
    padding: 0.5em 0.8em;
}

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

.cart-item {
    animation: fadeIn 0.3s ease-out;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .cart-item {
        padding: 15px;
    }
    
    .cart-item .row > div {
        margin-bottom: 15px;
        text-align: center;
    }
    
    .cart-item .row > div:last-child {
        margin-bottom: 0;
    }
    
    .quantity-buttons {
        margin: 0 auto;
    }
    
    .text-end {
        text-align: center !important;
    }
    
    .product-image {
        max-width: 150px;
        margin: 0 auto;
    }
}

/* Button hover effects */
.btn {
    transition: all 0.3s ease;
}

.btn:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.btn:active {
    transform: translateY(0);
}

/* Card hover effects */
.card {
    transition: all 0.3s ease;
}

.card:hover {
    box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.08);
}
</style>

<script>
async function updateQuantity(productId, size, change) {
    try {
        const itemId = `${productId}-${size}`;
        const quantityInput = document.querySelector(`#item-${itemId} .quantity-input`);
        const currentQuantity = parseInt(quantityInput.value);
        const newQuantity = currentQuantity + change;
        
        // Get the buttons
        const minusBtn = document.querySelector(`#item-${itemId} .quantity-btn.minus`);
        const plusBtn = document.querySelector(`#item-${itemId} .quantity-btn.plus`);
        const maxAllowedQuantity = parseInt(quantityInput.getAttribute('max'));
        
        // Disable buttons during the request
        minusBtn.disabled = true;
        plusBtn.disabled = true;
        
        // Validate quantity limits
        if (newQuantity < 1 || newQuantity > maxAllowedQuantity) {
            Swal.fire({
                icon: 'warning',
                title: 'Invalid Quantity',
                text: `Quantity must be between 1 and ${maxAllowedQuantity}`,
                confirmButtonColor: '#dc3545'
            });
            // Re-enable buttons with correct states
            minusBtn.disabled = currentQuantity <= 1;
            plusBtn.disabled = currentQuantity >= maxAllowedQuantity;
            return;
        }

        const response = await fetch('/cart/update-quantity', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ 
                productId: productId,
                size: size,
                quantity: newQuantity 
            })
        });

        const data = await response.json();

        if (data.success) {
            // Update quantity display
            quantityInput.value = newQuantity;
            
            // Update total price
            const totalPriceElement = document.querySelector(`#item-${itemId} .total-price`);
            totalPriceElement.textContent = `₹${(data.totalPrice).toLocaleString()}`;
            
            // Update button states
            minusBtn.disabled = newQuantity <= 1;
            plusBtn.disabled = newQuantity >= maxAllowedQuantity;
            
            // Show success message
            const Toast = Swal.mixin({
                toast: true,
                position: 'top-end',
                showConfirmButton: false,
                timer: 1500,
                timerProgressBar: true
            });
            
            Toast.fire({
                icon: 'success',
                title: 'Quantity updated'
            });
            
            // Reload after animation to update totalAmount
            setTimeout(() => {
                location.reload();
            }, 800);
        } else {
            throw new Error(data.message || 'Failed to update quantity');
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Something went wrong!',
            confirmButtonColor: '#dc3545'
        });
        
        // Re-enable buttons with previous states
        const itemId = `${productId}-${size}`;
        const currentQuantity = parseInt(document.querySelector(`#item-${itemId} .quantity-input`).value);
        const maxAllowedQuantity = parseInt(document.querySelector(`#item-${itemId} .quantity-input`).getAttribute('max'));
        const minusBtn = document.querySelector(`#item-${itemId} .quantity-btn.minus`);
        const plusBtn = document.querySelector(`#item-${itemId} .quantity-btn.plus`);
        minusBtn.disabled = currentQuantity <= 1;
        plusBtn.disabled = currentQuantity >= maxAllowedQuantity;
    }
}

async function removeFromCart(productId, size) {
    try {
        const result = await Swal.fire({
            title: 'Remove Item?',
            text: 'Are you sure you want to remove this item from your cart?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Yes, remove it!',
            cancelButtonText: 'Cancel'
        });

        if (result.isConfirmed) {
            const response = await fetch('/cart/remove', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ productId, size })
            });

            const data = await response.json();

            if (data.success) {
                // Animate item removal
                const itemId = `${productId}-${size}`;
                const itemElement = document.getElementById(`item-${itemId}`);
                itemElement.style.transition = 'all 0.3s ease';
                itemElement.style.opacity = '0';
                itemElement.style.transform = 'translateX(20px)';
                
                // Show success message
                const Toast = Swal.mixin({
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 1500,
                    timerProgressBar: true
                });
                
                Toast.fire({
                    icon: 'success',
                    title: 'Item removed from cart'
                });
                
                // Reload after animations
                setTimeout(() => {
                    location.reload();
                }, 800);
            } else {
                throw new Error(data.message || 'Failed to remove item');
            }
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Something went wrong!',
            confirmButtonColor: '#dc3545'
        });
    }
}
</script>

<%- include('../partials/user/footer.ejs') %>